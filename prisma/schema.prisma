// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 유저 테이블
model User {
  /// Primary Key
  id        Int       @id @default(autoincrement())
  /// 실명 이름
  name      String    @unique @db.VarChar(20)
  /// 닉네임
  nickname  String    @unique @db.VarChar(20)
  /// 이메일
  email     String    @unique @db.VarChar(100)
  /// 전화번호
  phone     String?   @unique @db.VarChar(20)
  /// 랭크
  rank      Int       @default(1) @db.SmallInt
  /// 포인트
  point     Int       @default(0) @db.Integer
  /// 정보 제공자
  provider  Provider
  /// 권한
  role      Role      @default(USER)
  /// 고유 아이디
  uniqueId  String    @unique @map("unique_id") @db.VarChar(100)
  /// 가입일
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  /// 수정일
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp
  /// 탈퇴일
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  userToken UserToken?
  addresses Address[]
  orders    Order[]

  @@map("user")
}

/// 유저 소셜 토큰 테이블
model UserToken {
  /// Primary Key
  id                 Int      @id @default(autoincrement())
  /// 유저 아이디 (FK)
  userId             Int      @unique @map("user_id")
  /// 액세스 토큰
  socialAccessToken  String   @unique @map("social_access_token") @db.VarChar(255)
  /// 리프레시 토큰
  socialRefreshToken String   @unique @map("social_refresh_token") @db.VarChar(255)
  /// 생성일
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamp

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_token")
}

/// 유저 주소 테이블
model Address {
  id            Int      @id @default(autoincrement())
  /// 유저 아이디 (FK)
  userId        Int      @map("user_id")
  /// 기본 주소 여부
  isDefault     Boolean  @default(false) @map("is_default") @db.Boolean
  /// 도로명 주소 전체
  roadFullAddr  String   @map("road_full_addr") @db.VarChar(255)
  /// 도로명 주소 부분1
  roadAddrPart1 String   @map("road_addr_part1") @db.VarChar(255)
  /// 상세 주소
  addrDetail    String?  @map("addr_detail") @db.VarChar(255)
  /// 우편번호
  zipNo         Int      @map("zip_no")
  /// 시도명
  siNm          String   @map("si_nm") @db.VarChar(20)
  /// 시군구명
  sggNm         String   @map("sgg_nm") @db.VarChar(20)
  /// 읍면동명
  emdNm         String   @map("emd_nm") @db.VarChar(20)
  /// 도로명
  rn            String   @db.VarChar(20)
  /// 생성일
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}

// 완제품 테이블
model Fancy {
  /// Primary Key
  id             String        @id @db.VarChar(50)
  /// 상품명
  name           String        @unique @db.VarChar(100)
  /// 원가
  costPrice      Int           @map("cost_price") @db.Integer
  /// 판매가
  price          Int           @db.Integer
  /// 할인율
  discountRate   Int           @default(0) @map("discount_rate") @db.SmallInt
  /// 설명1
  description1   String?       @db.Text
  /// 설명2
  description2   String?       @db.Text
  /// 상태
  status         ProductStatus @default(INACTIVE)
  /// 기본 제품 여부
  defaultDisplay Boolean       @default(false) @map("default_display") @db.Boolean
  /// 생성일
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamp
  /// 수정일
  updatedAt      DateTime      @updatedAt @map("updated_at") @db.Timestamp

  fancyImages     FancyImage[]
  fancyStocks     FancyStock[]
  fancyOptions    FancyOption[]
  fancySubOptions FancySubOption[]
  looks           Look[]
  tags            Tag[]
  fancyOrderItems FancyOrderItem[]

  @@map("fancy")
}

// 완제품 이미지 테이블
model FancyImage {
  /// Primary Key
  id        Int      @id @default(autoincrement())
  /// 완제품 아이디 (FK)
  fancyId   String   @map("fancy_id")
  /// 이미지
  imageUrl  String   @map("image_url") @db.VarChar(255)
  /// 순서
  order     Int      @db.SmallInt
  /// 생성일
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  fancy Fancy @relation(fields: [fancyId], references: [id], onDelete: Cascade)

  @@map("fancy_image")
}

/// 완제품 재고 테이블
model FancyStock {
  /// Primary Key
  id        Int      @id @default(autoincrement())
  /// 완제품 아이디 (FK)
  fancyId   String   @map("fancy_id")
  /// 재고량
  quantity  Int      @default(0) @db.SmallInt
  /// 생성일
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  fancy Fancy @relation(fields: [fancyId], references: [id], onDelete: Cascade)

  @@map("fancy_stock")
}

/// 완제품 옵션 테이블
model FancyOption {
  /// Primary Key
  id        Int      @id @default(autoincrement())
  /// 완제품 아이디 (FK)
  fancyId   String   @map("fancy_id")
  /// 옵션 아이디 (FK)
  optionId  Int      @map("option_id")
  /// 생성일
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  fancy  Fancy  @relation(fields: [fancyId], references: [id], onDelete: Cascade)
  option Option @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@map("fancy_option")
}

/// 옵션 테이블
model Option {
  /// Primary Key
  id        Int      @id @default(autoincrement())
  /// 옵션 이름
  name      String   @unique @db.VarChar(100)
  /// 생성일
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  fancyOptions FancyOption[]
  subOptions   SubOption[]

  @@map("option")
}

/// 완제품 소옵션 테이블
model FancySubOption {
  /// Primary Key
  id          Int      @id @default(autoincrement())
  /// 완제품 아이디 (FK)
  fancyId     String   @map("fancy_uuid")
  /// 옵션 아이디 (FK)
  optionId    Int      @map("option_id")
  /// 소옵션 아이디 (FK)
  subOptionId Int      @map("sub_option_id")
  /// 생성일
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp

  fancy     Fancy     @relation(fields: [fancyId], references: [id], onDelete: Cascade)
  subOption SubOption @relation(fields: [subOptionId], references: [id], onDelete: Cascade)

  @@map("fancy_sub_option")
}

/// 소옵션 테이블
model SubOption {
  /// Primary Key
  id        Int      @id @default(autoincrement())
  /// 소옵션 이름
  name      String   @unique @db.VarChar(100)
  /// 옵션 아이디 (FK)
  optionId  Int      @map("option_id")
  /// 생성일
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  fancySubOptions FancySubOption[]
  option          Option           @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@map("sub_option")
}

/// 완제품 룩 테이블
model Look {
  /// Primary Key
  id        Int      @id @default(autoincrement())
  /// 룩 이름
  name      String   @unique @db.VarChar(20)
  /// 생성일
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  fancies Fancy[]

  @@map("look")
}

/// 커스텀 상품 테이블
model Whatever {
  /// Primary Key
  id           String        @id @db.VarChar(50)
  /// 상품명
  name         String        @unique @db.VarChar(100)
  /// 원가
  costPrice    Int           @map("cost_price") @db.Integer
  /// 판매가
  price        Int           @db.Integer
  /// 할인율
  discountRate Int           @default(0) @map("discount_rate") @db.SmallInt
  /// 이미지
  imageUrl     String?       @map("image_url") @db.Text
  /// 설명
  description  String?       @db.Text
  /// 재고량
  quantity     Int           @default(0) @db.SmallInt
  /// 상태
  status       ProductStatus @default(INACTIVE)
  /// 생성일
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamp
  /// 수정일
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamp
  /// 삭제일
  deletedAt    DateTime?     @map("deleted_at") @db.Timestamp

  tags               Tag[]
  categories         Category[]
  whateverOrderItems WhateverOrderItem[]

  @@map("whatever")
}

/// 총 주문내역 테이블
model Order {
  /// Primary Key
  id             Int            @id @default(autoincrement())
  /// 유저 아이디 (FK)
  userId         Int            @map("user_id")
  /// 배송 상태
  deliveryStatus DeliveryStatus @default(PREPARING) @map("delivery_status")
  /// 총 가격
  totalPrice     Int            @db.Integer
  /// 생성일
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamp
  /// 수정일
  updatedAt      DateTime       @updatedAt @map("updated_at") @db.Timestamp
  /// 환불일
  refundedAt     DateTime?      @map("refunded_at") @db.Timestamp

  fancyOrderItems    FancyOrderItem[]
  whateverOrderItems WhateverOrderItem[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("order")
}

/// 완제품 주문 상세내역 테이블
model FancyOrderItem {
  /// Primary Key
  id        Int       @id @default(autoincrement())
  /// 완제품 아이디 (FK)
  fancyId   String    @map("fancy_uuid")
  /// 주문 아이디 (FK)
  orderId   Int       @map("order_id")
  /// 수량
  quantity  Int       @db.SmallInt
  /// 옵션
  option    String?   @db.VarChar(255)
  /// 가격
  price     Int       @db.Integer
  /// 포장 방식
  packaging Packaging @default(DEFAULT)
  /// 생성일
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp

  fancy Fancy @relation(fields: [fancyId], references: [id], onDelete: Cascade)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_item")
}

/// 커스텀 제품 주문 상세내역 테이블
model WhateverOrderItem {
  /// Primary Key
  id         Int       @id @default(autoincrement())
  /// 커스텀 제품 아이디 (FK)
  whateverId String    @map("whatever_id")
  /// 주문 아이디 (FK)
  orderId    Int       @map("order_id")
  /// 수량
  quantity   Int       @db.SmallInt
  /// 가격
  price      Int       @db.Integer
  /// 포장 방식
  packaging  Packaging @default(DEFAULT)
  /// 생성일
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp

  whatever Whatever @relation(fields: [whateverId], references: [id], onDelete: Cascade)
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("whatever_order_item")
}

/// 상품 태그 테이블
model Tag {
  /// Primary Key
  id        Int      @id @default(autoincrement())
  /// 태그 이름
  name      String   @unique @db.VarChar(20)
  /// 생성일
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  fancies  Fancy[]
  whatever Whatever[]

  @@map("tag")
}

/// 커스텀 제품 카테고리 테이블
model Category {
  /// Primary Key
  id        Int       @id @default(autoincrement())
  /// 카테고리 이름
  name      String    @unique @db.VarChar(20)
  /// 생성일
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  /// 수정일
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp
  /// 삭제일
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  whatever Whatever[]

  @@map("category")
}

model Parts {
  /// Primary Key
  id           Int           @id @default(autoincrement())
  /// 파츠명
  name         String        @unique @db.VarChar(100)
  /// 원가
  costPrice    Int           @map("cost_price") @db.Integer
  /// 판매가
  price        Int           @db.Integer
  /// 할인율
  discountRate Int           @default(0) @map("discount_rate") @db.SmallInt
  /// 설명
  description  String?       @db.Text
  /// 재고량
  quantity     Int           @default(0) @db.SmallInt
  /// 상태
  status       ProductStatus @default(INACTIVE)
  /// 생성일
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamp
  /// 수정일
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamp
  /// 삭제일
  deletedAt    DateTime?     @map("deleted_at") @db.Timestamp

  partsImage PartsImage[]

  @@map("parts")
}

model PartsImage {
  /// Primary Key
  id        Int       @id @default(autoincrement())
  /// 파츠 아이디 (FK)
  partsId   Int       @map("parts_id")
  /// 이미지
  imageUrl  String    @map("image_url") @db.VarChar(255)
  /// 생성일
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  /// 수정일
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp
  /// 삭제일
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  parts Parts @relation(fields: [partsId], references: [id], onDelete: Cascade)

  @@map("parts_image")
}

/// 유저 권한 ENUM
enum Role {
  USER
  ADMIN
}

/// 유저 정보 제공자 ENUM
enum Provider {
  naver
  kakao
  google
}

/// 배송 상태 ENUM
enum DeliveryStatus {
  PREPARING // 상품준비
  DEPARTURE // 집화출발
  PICKED_UP // 상품인수
  IN_TRANSIT // 상품 이동중
  ARRIVED_AT_DEST // 배송지 도착
  OUT_FOR_DELIVERY // 배송출발
  DELIVERED // 배달완료
  RETURNED // 반품
  CANCELLED // 취소
}

/// 상품 상태 ENUM
enum ProductStatus {
  ACTIVE
  INACTIVE
}

/// 상품 패키징 ENUM
enum Packaging {
  DEFAULT
  SPECIAL
}
